package enum

const enumTemplate = `// Code generated by go-enum; DO NOT EDIT.
// Laste generated at {{ .GeneratedAt }}.
// go-enum: https://github.com/bombsimon/enum

package {{.Package}}

import (
	{{ if .WithJSON }}"encoding/json"{{ end }}
	"fmt"
)

// {{.TypeName}} is an Enum.
type {{.TypeName}} {{.ValueType}}

// {{.TypeName}}FromString returns a {{.TypeName}} from it's string representation.
func {{.TypeName}}FromString(s string) ({{.TypeName}}, error) {
	switch s {
	{{ range $e := .Enums -}}
	case {{$e.Name}}.String(){{ if and ($.WithValue) (eq $.ValueType "string") }},{{$e.Name}}.Value(){{ end }}:
		return {{$e.Name}}, nil
	{{ end -}}
	default:
		return {{.TypeName}}(-1), fmt.Errorf("unknown {{.TypeName}} %s", s)
	}
}

func (v {{.TypeName}}) String() string {
    switch v {
	{{ range $e := .Enums -}}
	case {{$e.Name}}:
		return "{{$e.String}}"
	{{ end -}}
	default:
		return ""
	}
}

{{ if .WithValue }}
// Value returns the actual value for the enum type.
func (v {{.TypeName}}) Value() {{ .ValueType }} {
    switch v {
	{{ range $e := .Enums -}}
	case {{$e.Name}}:
		return {{ if eq $.ValueType "string" }}"{{$e.Value}}"{{ else }}{{$e.Int}}{{ end }}
	{{ end -}}
	default:
		return {{ if eq $.ValueType "string" }}""{{ else }}-1{{ end }}
	}
}
{{ end }}

// Valid returns false if the {{.TypeName}} isn't valid.
func (v {{.TypeName}}) Valid() bool {
	switch v {
	{{ range $e := .Enums -}}
	case {{$e.Name}}:
		return true
	{{ end -}}
	default:
		return false
	}
}

{{ if .WithJSON }}
// MarshalJSON marshalls the {{.TypeName}} enum to it's JSON representation.
func (v {{.TypeName}}) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.String())
}

// UnmarshalJSON unmarshalls the JSON to it's {{.TypeName}} enum.
func (v *{{.TypeName}}) UnmarshalJSON(b []byte) error {
	var s string

	if err := json.Unmarshal(b, &s); err != nil {
		return err
	}

	newV, err := {{.TypeName}}FromString(s)
	if err != nil {
		return err
	}

	*v = newV

	return nil
}
{{ end }}`

// vim: set ft=gohtmltmpl:
