// Code generated by go-enum; DO NOT EDIT.
// Laste generated at 2019-11-12T09:46:37+01:00.
// go-enum: https://github.com/bombsimon/enum

package example

import (
	"encoding/json"
	"fmt"
)

// PostType is an Enum.
type PostType int

// PostTypeFromString returns a PostType from it's string representation.
func PostTypeFromString(s string) (PostType, error) {
	switch s {
	case PostCreate.String():
		return PostCreate, nil
	case PostRead.String():
		return PostRead, nil
	case PostUpdate.String():
		return PostUpdate, nil
	case PostDelete.String():
		return PostDelete, nil
	default:
		return PostType(-1), fmt.Errorf("unknown PostType %s", s)
	}
}

func (v PostType) String() string {
	switch v {
	case PostCreate:
		return "create"
	case PostRead:
		return "read"
	case PostUpdate:
		return "update"
	case PostDelete:
		return "delete"
	default:
		return ""
	}
}

// Valid returns false if the PostType isn't valid.
func (v PostType) Valid() bool {
	switch v {
	case PostCreate:
		return true
	case PostRead:
		return true
	case PostUpdate:
		return true
	case PostDelete:
		return true
	default:
		return false
	}
}

// MarshalJSON marshalls the PostType enum to it's JSON representation.
func (v PostType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.String())
}

// UnmarshalJSON unmarshalls the JSON to it's PostType enum.
func (v *PostType) UnmarshalJSON(b []byte) error {
	var s string

	if err := json.Unmarshal(b, &s); err != nil {
		return err
	}

	newV, err := PostTypeFromString(s)
	if err != nil {
		return err
	}

	*v = newV

	return nil
}
